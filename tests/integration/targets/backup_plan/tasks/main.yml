---
- module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: Create an AWS Backup vault for the plan to target
      amazon.aws.backup_vault:
        backup_vault_name: "{{ backup_vault_name }}"

    - name: Create an AWS Backup plan (check_mode)
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        rules:
          - rule_name: daily
            target_backup_vault_name: "{{ backup_vault_name }}"
            schedule_expression: "cron(0 5 ? * * *)"
            start_window_minutes: 60
            completion_window_minutes: 1440
        tags:
          environment: test
      check_mode: true
      register: backup_plan_create_result

    - name: Verify results
      ansible.builtin.assert:
        that:
          - backup_plan_create_result.exists
          - backup_plan_create_result.changed

    - name: Create an AWS Backup plan
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        rules:
          - rule_name: daily
            target_backup_vault_name: "{{ backup_vault_name }}"
            schedule_expression: "cron(0 5 ? * * *)"
            start_window_minutes: 60
            completion_window_minutes: 1440
        tags:
          environment: test
      register: backup_plan_create_result

    - name: Verify results
      ansible.builtin.assert:
        that:
          - backup_plan_create_result.exists
          - backup_plan_create_result.changed
          - backup_plan_create_result.backup_plan.backup_plan_name == backup_plan_name

    - name: Create an AWS Backup plan (idempotency)
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        rules:
          - rule_name: daily
            target_backup_vault_name: "{{ backup_vault_name }}"
            schedule_expression: "cron(0 5 ? * * *)"
            start_window_minutes: 60
            completion_window_minutes: 1440
        tags:
          environment: test
      register: backup_plan_create_result

    - name: Verify results
      ansible.builtin.assert:
        that:
          - backup_plan_create_result.exists
          - not backup_plan_create_result.changed
          - backup_plan_create_result.backup_plan.backup_plan_name == backup_plan_name

    - name: Get info on AWS Backup plan
      amazon.aws.backup_plan_info:
        backup_plan_names:
          - "{{ backup_plan_name }}"
      register: backup_plan_info_result

    - name: Verify results
      ansible.builtin.assert:
        that:
          - backup_plan_create_result.backup_plan.backup_plan_name == backup_plan_name

    - name: Modify an AWS Backup plan (check_mode)
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        rules:
          - rule_name: daily
            target_backup_vault_name: "{{ backup_vault_name }}"
            schedule_expression: "cron(0 5 ? * * *)"
            start_window_minutes: 60
            completion_window_minutes: 1220
        tags:
          environment: test
      check_mode: true
      register: backup_plan_create_result

    - name: Verify results
      ansible.builtin.assert:
        that:
          - backup_plan_create_result.exists
          - backup_plan_create_result.changed

    - name: Modify an AWS Backup plan
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        rules:
          - rule_name: daily
            target_backup_vault_name: "{{ backup_vault_name }}"
            schedule_expression: "cron(0 5 ? * * *)"
            start_window_minutes: 60
            completion_window_minutes: 1220
        tags:
          environment: test
      register: backup_plan_modify_result

    - name: Verify results
      ansible.builtin.assert:
        that:
          - backup_plan_modify_result.exists
          - backup_plan_modify_result.changed
          - backup_plan_modify_result.backup_plan.backup_plan_name == backup_plan_name

    - name: Modify an AWS Backup plan (idempotency)
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        rules:
          - rule_name: daily
            target_backup_vault_name: "{{ backup_vault_name }}"
            schedule_expression: "cron(0 5 ? * * *)"
            start_window_minutes: 60
            completion_window_minutes: 1220
        tags:
          environment: test
      register: backup_plan_modify_result

    - name: Verify results
      ansible.builtin.assert:
        that:
          - backup_plan_modify_result.exists
          - not backup_plan_modify_result.changed
          - backup_plan_modify_result.backup_plan.backup_plan_name == backup_plan_name

    - name: Delete an AWS Backup plan (check_mode)
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        state: absent
      check_mode: true
      register: backup_plan_delete_result

    - name: Verify results
      ansible.builtin.assert:
        that:
          - not backup_plan_delete_result.exists
          - backup_plan_delete_result.changed

    - name: Delete an AWS Backup plan
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        state: absent
      register: backup_plan_delete_result

    - name: Verify results
      ansible.builtin.assert:
        that:
          - not backup_plan_delete_result.exists
          - backup_plan_delete_result.changed

    - name: Delete an AWS Backup plan (idempotency)
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        state: absent
      register: backup_plan_delete_result

    - name: Verify results
      ansible.builtin.assert:
        that:
          - not backup_plan_delete_result.exists
          - not backup_plan_delete_result.changed

  always:
    - name: Delete AWS Backup plan created during this test
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        state: absent
      ignore_errors: true

    - name: Delete AWS Backup vault created during this test
      amazon.aws.backup_vault:
        backup_vault_name: "{{ backup_vault_name }}"
        state: absent
      ignore_errors: true
